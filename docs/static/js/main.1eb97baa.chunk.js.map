{"version":3,"sources":["components/Quote.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["ContainerQuote","styled","div","Quote","data","quote","author","Spinner","className","Container","Button","button","App","useState","setQuote","loading","setLoading","getFromAPI","a","fetch","api","json","useEffect","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uiCAIA,IAAMA,EAAiBC,IAAOC,IAAV,KAmDLC,EAlBD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAELC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,OAEf,OAAID,EAGA,kBAACL,EAAD,KACI,4BAAKK,EAAL,KACA,gCAAMC,EAAN,MALU,MC7BPC,EAVC,WAEZ,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,Y,0oBCF3B,IAAMC,EAAYR,IAAOC,IAAV,KAOTQ,EAAST,IAAOU,OAAV,KAyDGC,MAzCf,WAAe,MAGiBC,mBAAS,IAH1B,mBAGHR,EAHG,KAGIS,EAHJ,OAMqBD,oBAAS,GAN9B,mBAMHE,EANG,KAMMC,EANN,KAQLC,EAAU,uCAAG,8BAAAC,EAAA,6DACfF,GAAW,GADI,SAEGG,MAAM,uDAFT,cAETC,EAFS,gBAGIA,EAAIC,OAHR,OAGTjB,EAHS,OAKfU,EAASV,EAAK,IACdY,GAAW,GANI,2CAAH,qDAchB,OAJAM,qBAAU,WACNL,MACD,IAGC,kBAACR,EAAD,KACMM,EACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACIX,KAAMC,IAId,kBAACK,EAAD,CACIa,QAASN,GADb,mBChDQO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1eb97baa.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\n\nconst ContainerQuote = styled.div`\n    padding: 3rem;\n    border-radius: .5rem;\n    background-color: #fff;\n    max-width:800px;\n    \n    @media (min-width: 992px) {\n        margin-top: 15rem;\n    }\n    h1 {\n        font-family: Arial, Helvetica, sans-serif;\n        text-align: center;\n        position: relative;\n        padding-left: 4rem;\n        &::before {\n            content: open-quote;\n            font-size: 10rem;\n            color: black;\n            position: absolute;\n            left: -1rem;\n            top: -2rem;\n        }\n    }\n    p {\n        font-family: Verdana, Geneva, Tahoma, sans-serif;\n        font-size: 1.4rem;\n        font-weight:bold;\n        text-align: right;\n        color: #666;\n        margin-top: 2rem;\n    }\n`;\n\nconst Quote = ({ data }) => {\n\n    const { quote, author } =  data;\n\n    if(!quote) return null;\n\n    return (\n        <ContainerQuote>\n            <h1>{quote} </h1>\n            <p>- {author} </p>\n        </ContainerQuote>\n    );\n}\n\nQuote.propTypes = {\n    data: PropTypes.object.isRequired\n}\n\nexport default Quote;\n","import React from 'react';\n\nconst Spinner = () => {\n\n    return (\n        <div className=\"spinner\">\n            <div className=\"cube1\"></div>\n            <div className=\"cube2\"></div>\n        </div>\n    );\n}\n\nexport default Spinner;\n","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport Quote from './components/Quote';\nimport Spinner from './components/Spinner';\n\nconst Container = styled.div`\n    display: flex;\n    align-items: center;\n    padding-top: 5rem;\n    flex-direction: column;\n` ;\n\nconst Button = styled.button`\n    background: -webkit-linear-gradient(top left, #007d35 0%, #007d35 40%, #0f574e 100%);\n    background-size: 300px;\n    font-family:  Arial, Helvetica, sans-serif;\n    color: #fff;\n    margin-top: 1rem;\n    padding: 1rem 1rem;\n    font-size: 2rem;\n    border: 2px solid black;\n    transition: background-size .8s ease;\n    :hover {\n        cursor:pointer;\n        background-size: 400px;\n    }\n`;\n\nfunction App() {\n\n    // State para guardar frase\n    const [ quote, setQuote ] = useState({});\n\n    // State para mostrar Spinner\n    const [ loading, setLoading ] = useState(false);\n\n    const getFromAPI = async () => {\n        setLoading(true);\n        const api = await fetch('https://breaking-bad-quotes.herokuapp.com/v1/quotes');\n        const data = await api.json();\n\n        setQuote(data[0]);\n        setLoading(false);\n    }\n\n    // Cargar frase al inicio\n    useEffect(() => {\n        getFromAPI();\n    }, []);\n\n    return (\n        <Container>\n            { loading ?\n                <Spinner />\n            : \n                <Quote \n                    data={quote}\n                />\n            }\n\n            <Button\n                onClick={getFromAPI}\n            >\n                Obtener Frase\n            </Button>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}